/**********************************************************
-	WEBCV
- 	SCRIPT PAR: M-A RAMSAY, AMATEUR LADY?KILLER
***********************************************************/
/*
* TODO: Auth user
* 
*/

/***********************
* DROP TABLES
************************/

PROMPT ***DESTRUCTION DES TABLES***
DROP TABLE USERS CASCADE CONSTRAINTS;
DROP TABLE PROJECTS CASCADE CONSTRAINTS;
DROP TABLE CONTACTS CASCADE CONSTRAINTS;
DROP TABLE JOBS CASCADE CONSTRAINTS;
DROP TABLE TOKENS CASCADE CONSTRAINTS;
DROP TABLE SITECONTENT CASCADE CONSTRAINTS;
DROP TABLE ACCESSLOG CASCADE CONSTRAINTS;
PROMPT ***TABLES DETRUITES***

/*************************
*CREATE TABLES
**************************/

CREATE TABLE USERS 
(
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT users_pk PRIMARY KEY,
    user_name       VARCHAR2(32) UNIQUE,
    user_password   VARCHAR2(64) NOT NULL,
    user_rank       NUMBER(1) DEFAULT 1 NOT NULL CHECK( user_rank IN (1,2,3)) --1 is MEMBER, 2 is ADMIN, 3 is OWNER
);

CREATE TABLE PROJECTS 
(
    id                      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT projects_pk PRIMARY KEY,
    project_name            VARCHAR2(48) NOT NULL,
    project_description     VARCHAR2(3072) NOT NULL,
    project_image           VARCHAR2(256) DEFAULT 'placeholder.jpg' NOT NULL,
    project_technologies    VARCHAR2(1024) NOT NULL,
    lang                    VARCHAR2(2) DEFAULT 'en' NOT NULL
);

CREATE TABLE CONTACTS 
(
    id                  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT contacts_pk PRIMARY KEY,
    contact_name        VARCHAR2(256) UNIQUE,
    contact_email       VARCHAR2(254) NOT NULL,
    contact_phone       VARCHAR2(15),
    contact_poste       VARCHAR2(48)
);

CREATE TABLE JOBS 
(
    id                  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT jobs_pk PRIMARY KEY,
    job_name            VARCHAR2(48) NOT NULL,
    job_description     VARCHAR2(500) NOT NULL,
    job_image           VARCHAR2(256),
    job_employer        VARCHAR2(128) NOT NULL,
    job_year            VARCHAR2(11) NOT NULL,
    job_contact         NUMBER NOT NULL CONSTRAINT jobs_contacts_fk   REFERENCES CONTACTS(id),
    lang                VARCHAR2(2) DEFAULT 'en' NOT NULL
);

CREATE TABLE TOKENS 
(
    id                  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT tokens_pk PRIMARY KEY,
    token               VARCHAR2(64) UNIQUE,
    token_email         VARCHAR2(254) NOT NULL,
    token_creation      DATE DEFAULT SYSDATE,
    token_expiration    DATE DEFAULT SYSDATE + (2*7)    --Token good for 2 weeks
);

CREATE TABLE SITECONTENT 
(
    id                          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT sitecontent_pk PRIMARY KEY,
    content_title               NVARCHAR2(128) NOT NULL,
    content_description_1       NVARCHAR2(2000) NOT NULL,
    content_description_2       NVARCHAR2(2000) NOT NULL,
    content_about               NVARCHAR2(16) NOT NULL,
    content_cv                  NVARCHAR2(16) NOT NULL,
    content_readcv              NVARCHAR2(128) NOT NULL,
    content_myprojects          NVARCHAR2(16) NOT NULL,
    content_contactme           NVARCHAR2(16) NOT NULL,
    content_form_name           NVARCHAR2(16) NOT NULL,
    content_form_name_error     NVARCHAR2(128) NOT NULL,
    content_form_email          NVARCHAR2(16) NOT NULL,
    content_form_email_error    NVARCHAR2(128) NOT NULL,
    content_form_message        NVARCHAR2(16) NOT NULL,
    content_form_message_error  NVARCHAR2(128) NOT NULL,
    content_form_captcha        NVARCHAR2(16)  NOT NULL,
    content_form_captcha_error  NVARCHAR2(128) NOT NULL,
    content_close               NVARCHAR2(32) NOT NULL,
    lang                        NVARCHAR2(2) UNIQUE
);

CREATE TABLE ACCESSLOG 
(
    id                  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT accesslog_pk PRIMARY KEY,
    id_token            NUMBER UNIQUE CONSTRAINT access_token REFERENCES TOKENS(id),
    access_date         DATE DEFAULT SYSDATE
);


CREATE OR REPLACE VIEW VIEWJOBS AS
(   SELECT 
        j.job_name,
        j.job_description,
        j.job_image,
        j.job_employer,
        j.job_year,
        c.contact_name,
        c.contact_email,
        c.contact_phone,
        c.contact_poste,
        j.lang lang
    FROM JOBS j 
    JOIN CONTACTS c ON j.job_contact = c.id
);

/************************
* FUNCTIONS & PROCEDURES
************************/

CREATE OR REPLACE PROCEDURE newToken( ptoken     IN VARCHAR2, pemail     IN VARCHAR2)
IS
BEGIN    
    INSERT INTO TOKENS (token,token_email)
    VALUES (ptoken,pemail);
END newToken;
/
CREATE OR REPLACE PROCEDURE newUser(    puser_name      IN VARCHAR2, 
                                        puser_password  IN VARCHAR2,
                                        puser_rank      IN NUMBER)
IS
BEGIN    
    INSERT INTO USERS (
        user_name,
        user_password,
        user_rank)
    VALUES (
        UPPER(puser_name),
        puser_password,
        puser_rank);
END newUser;
/

CREATE OR REPLACE FUNCTION validateUser(   puser_name      IN VARCHAR2, 
                                            puser_password  IN VARCHAR2) RETURN NUMBER
IS
    prank NUMBER;
BEGIN
    SELECT user_rank 
    INTO prank 
    FROM USERS 
    WHERE UPPER(user_name) = UPPER(puser_name) AND user_password = puser_password;   
    
    IF prank >0 AND prank <4 AND prank IS NOT NULL THEN
        RETURN prank;
    ELSE 
        RAISE_APPLICATION_ERROR (
            num => -20001,
            msg => 'User could not be authentified');
    END IF;
END validateUser;
/


CREATE OR REPLACE PROCEDURE addContact(   
    pcontact_name IN VARCHAR2,
    pcontact_email IN VARCHAR2,
    pcontact_phone IN VARCHAR2,
    pcontact_poste IN VARCHAR2
    )
IS
    v_count NUMBER;
BEGIN
    SELECT count(contact_name) 
    INTO v_count 
    FROM CONTACTS 
    WHERE UPPER(contact_name) = UPPER(pcontact_name);
    IF v_count = 0 THEN
        INSERT INTO CONTACTS (
            contact_name,
            contact_email,
            contact_phone,
            contact_poste
        )
        VALUES (
            pcontact_name,
            pcontact_email,
            pcontact_phone,
            pcontact_poste
        );
        COMMIT;
    ELSE 
        RAISE_APPLICATION_ERROR (
            num => -20011,
            msg => 'Contact already exists!');
    END IF;
END addContact;
/

CREATE OR REPLACE PROCEDURE addJob(   
    pjob_name IN VARCHAR2,
    pjob_description IN VARCHAR2,
    pjob_image IN VARCHAR2,
    pjob_employer IN VARCHAR2,
    pjob_year IN VARCHAR2,
    pjob_contact IN VARCHAR2,
    plang IN VARCHAR2
    )
IS
    v_count NUMBER;
    v_contact NUMBER;
BEGIN
    SELECT count(job_name) 
    INTO v_count 
    FROM JOBS 
    WHERE UPPER(job_name) = UPPER(pjob_name) AND UPPER(lang) = UPPER(plang); 
    SELECT id
    INTO v_contact 
    FROM CONTACTS 
    WHERE UPPER(contact_name) = UPPER(pjob_contact); 
    IF v_count = 0 AND v_contact IS NOT NULL THEN
        INSERT INTO JOBS (
            job_name,
            job_description,
            job_image,
            job_employer,
            job_year,
            job_contact,
            lang
        )
        VALUES (
            pjob_name,
            pjob_description,
            pjob_image,
            pjob_employer,
            pjob_year,
            v_contact,
            plang
        );
        COMMIT;
    ELSE 
        RAISE_APPLICATION_ERROR (
            num => -20012,
            msg => 'Job in that language already exists!');
    END IF;
END addJob;
/

CREATE OR REPLACE PROCEDURE addSiteLang(   
    pcontent_title               IN NVARCHAR2,
    pcontent_description_1       IN NVARCHAR2,
    pcontent_description_2       IN NVARCHAR2,
    pcontent_about               IN NVARCHAR2,
    pcontent_cv                  IN NVARCHAR2,
    pcontent_readcv              IN NVARCHAR2,
    pcontent_myprojects          IN NVARCHAR2,
    pcontent_contactme           IN NVARCHAR2,
    pcontent_form_name           IN NVARCHAR2,
    pcontent_form_name_error     IN NVARCHAR2,
    pcontent_form_email          IN NVARCHAR2,
    pcontent_form_email_error    IN NVARCHAR2,
    pcontent_form_message        IN NVARCHAR2,
    pcontent_form_message_error  IN NVARCHAR2,
    pcontent_form_captcha        IN NVARCHAR2,
    pcontent_form_captcha_error  IN NVARCHAR2,
    pcontent_close               IN NVARCHAR2,
    plang                        IN NVARCHAR2
    )
IS
    v_count NUMBER;
BEGIN
    SELECT count(lang) 
    INTO v_count 
    FROM SITECONTENT 
    WHERE UPPER(lang) = UPPER(plang); 
    IF v_count = 0 THEN
        INSERT INTO SITECONTENT (
            content_title,
            content_description_1,
            content_description_2,
            content_about,
            content_cv,
            content_readcv,
            content_myprojects,
            content_contactme,
            content_form_name,
            content_form_name_error,
            content_form_email,
            content_form_email_error,
            content_form_message,
            content_form_message_error,
            content_form_captcha,
            content_form_captcha_error,
            content_close,
            lang
        )
        VALUES (
            pcontent_title,
            pcontent_description_1,
            pcontent_description_2,
            pcontent_about,
            pcontent_cv,
            pcontent_readcv,
            pcontent_myprojects,
            pcontent_contactme,
            pcontent_form_name,
            pcontent_form_name_error,
            pcontent_form_email,
            pcontent_form_email_error,
            pcontent_form_message,
            pcontent_form_message_error,
            pcontent_form_captcha,
            pcontent_form_captcha_error,
            pcontent_close,
            plang
        );
        COMMIT;
    ELSE 
        RAISE_APPLICATION_ERROR (
            num => -20010,
            msg => 'Project in that language already exists!');
    END IF;
END addSiteLang;
/

CREATE OR REPLACE PROCEDURE changeSiteContent(   
    pcontent_title               IN NVARCHAR2,
    pcontent_description_1       IN NVARCHAR2,
    pcontent_description_2       IN NVARCHAR2,
    plang                        IN NVARCHAR2
    )
IS
    v_count NUMBER;
BEGIN
    SELECT count(lang) 
    INTO v_count 
    FROM SITECONTENT 
    WHERE UPPER(lang) = UPPER(plang); 
    IF v_count > 0 THEN
        UPDATE 
            SITECONTENT
        SET 
            content_title = pcontent_title,
            content_description_1 = pcontent_description_1,
            content_description_2 = pcontent_description_2
        WHERE 
            UPPER(lang) = UPPER(plang);
        COMMIT;
    ELSE 
        RAISE_APPLICATION_ERROR (
            num => -20011,
            msg => 'Content in that language does not exists!');
    END IF;
END changeSiteContent;
/
    